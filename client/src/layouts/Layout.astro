---
import Header from '../components/Header.astro';

interface Props {
    title: string;
    description: string;
    image?: string;
    canonicalURL?: URL;
}

const { title, description, image, canonicalURL } = Astro.props;
const siteURL = Astro.site ? Astro.site.toString() : 'https://jan-kessler.com/';
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />

        <link
            rel="apple-touch-icon"
            sizes="180x180"
            href="favicon/apple-touch-icon.png"
        />
        <link
            rel="icon"
            type="image/png"
            sizes="32x32"
            href="favicon/favicon-32x32.png"
        />
        <link
            rel="icon"
            type="image/png"
            sizes="16x16"
            href="favicon/favicon-16x16.png"
        />
        <link rel="manifest" href="favicon/site.webmanifest" />

        <link rel="sitemap" href="/sitemap-index.xml" />

        <!-- SEO meta tags -->
        <title>{title}</title>
        <meta name="description" content={description} />
        <link rel="canonical" href={canonicalURL || siteURL} />

        <!-- Open Graph / Facebook -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content={siteURL} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        {
            image && (
                <meta property="og:image" content={new URL(image, siteURL)} />
            )
        }

        <!-- Twitter -->
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content={siteURL} />
        <meta property="twitter:title" content={title} />
        <meta property="twitter:description" content={description} />
        {
            image && (
                <meta
                    property="twitter:image"
                    content={new URL(image, siteURL)}
                />
            )
        }
    </head>
    <body>
        <Header />
        <slot />
    </body>
</html>
<style is:global>
    /* spacing */
    :root {
        --container-padding: 2rem;
    }

    /* colors */
    :root[data-theme='light'] {
        --background: white;
        --text-color: black;
    }
    :root[data-theme='dark'] {
        --background: black;
        --text-color: white;
    }

    /* font sizes */

    :root {
        --display2: 20rem;
        --display1: 4rem;
        --headline: 2rem;
        --subheadline: 1.5rem;
        --body: 1rem;
        --small: 0.875rem;
    }

    /* responsive */

    @media (max-width: 992px) {
        :root {
            --display2: 12rem;
            --display1: 2.5rem;
            --headline: 1.75rem;
            --subheadline: 1.25rem;
            --body: 0.9rem;
            --small: 0.8rem;
            --container-padding: 1rem;
        }
    }

    @font-face {
        font-family: 'JetBrains Mono';
        src:
            url('/fonts/JetBrains_Mono/JetBrainsMono-VariableFont_wght.woff2')
                format('woff2 supports variations'),
            url('/fonts/JetBrains_Mono/JetBrainsMono-VariableFont_wght.woff2')
                format('woff2-variations');
        font-weight: 400 700;
        font-display: swap;
        font-style: normal;
    }

    @font-face {
        font-family: 'JetBrains Mono Auto';
        src:
            url('/fonts/JetBrains_Mono/JetBrainsMono-VariableFont_wght.woff2')
                format('woff2 supports variations'),
            url('/fonts/JetBrains_Mono/JetBrainsMono-VariableFont_wght.woff2')
                format('woff2-variations');
        font-weight: 400 700;
        font-display: auto;
        font-style: normal;
    }

    /* general */
    html {
        font-family: 'JetBrains Mono', Arial, sans-serif;
        background: var(--background);
        color: var(--text-color);
    }

    body {
        margin: 0;
        font-size: var(--body);
    }

    a {
        color: var(--text-color);
        text-decoration: underline;
        font-size: var(--body);
    }

    a:visited {
        color: var(--text-color);
    }

    .show-dark {
        display: none;
    }

    .dark .show-light {
        display: none;
    }

    .dark .show-dark {
        display: block;
    }

    /* animations */

    .fade-in {
        opacity: 0;
        transition: opacity 1s ease-in;
    }

    .fade-in.visible {
        opacity: 1;
    }

    .slide-in {
        transform: translateX(100%);
        opacity: 0;
        transition:
            transform 1s ease-out,
            opacity 1s ease-in;
    }

    .slide-in.visible {
        transform: translateX(0);
        opacity: 1;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const processIntro = () => {
            document.removeEventListener('visibilitychange', processIntro);

            const fadeInElements = document.querySelectorAll(
                '.fade-in, .slide-in',
            );

            setTimeout(() => {
                fadeInElements.forEach((element: Element) => {
                    element.classList.add('visible');
                });
            }, 200);
        };

        // Initial check when the page loads
        if (document.hidden) {
            document.addEventListener('visibilitychange', processIntro);
        } else {
            processIntro();
        }
    });
</script>
