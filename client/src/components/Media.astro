---
import type { Media } from '../types/payload-types';
interface Props {
    media: Media;
}
const mediaPrefix = import.meta.env.MEDIA_PREFIX ?? '';
const { media } = Astro.props;
---

{
    media.mimeType?.includes('image') ? (
        <picture>
            {media.sizes?.desktop && (
                <source
                    srcset={`${mediaPrefix}${media.sizes.desktop.url}`}
                    media="(min-width: 1200px)"
                />
            )}
            {media.sizes?.tablet && (
                <source
                    srcset={`${mediaPrefix}${media.sizes.tablet.url}`}
                    media="(min-width: 768px)"
                />
            )}
            {media.sizes?.card && (
                <source
                    srcset={`${mediaPrefix}${media.sizes.card.url}`}
                    media="(min-width: 480px)"
                />
            )}
            {media.sizes?.thumbnail && (
                <source
                    srcset={`${mediaPrefix}${media.sizes.thumbnail.url}`}
                    media="(max-width: 479px)"
                />
            )}
            <img
                src={`${mediaPrefix}${media.url}`}
                alt={media.alt}
                width={media.width}
                height={media.height}
                decoding="async"
                loading="lazy"
            />
        </picture>
    ) : (
        <video
            src={`${mediaPrefix}${media.url}`}
            muted
            loop
            playsinline
            preload="none"
            class="lazy-video"
        />
    )
}

<style>
    img,
    video {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
    }
</style>

<script>
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                const video = entry.target as HTMLVideoElement;
                video.play();
                observer.unobserve(video);
            }
        });
    });

    document.querySelectorAll('.lazy-video').forEach((video) => {
        observer.observe(video);
    });
</script>
